// Generated by CoffeeScript 1.9.3
(function() {
  var Minuta, MinutaAjaxDownloader, MinutaAjaxMessageParser, Notifier, notifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MinutaAjaxDownloader = (function() {
    function MinutaAjaxDownloader() {
      this.getMessages = bind(this.getMessages, this);
    }

    MinutaAjaxDownloader.prototype.URI = "https://dennikn.sk/wp-admin/admin-ajax.php?action=minute&home=0&tag=0";

    MinutaAjaxDownloader.prototype.ARTICLE_REGEX = /(<article[\s\S]*?<\/article>)/ig;

    MinutaAjaxDownloader.prototype.xhrDownload = function(responseType, URI, successCallback, errorCallback) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open("GET", URI);
      xhr.responseType = responseType;
      xhr.onload = successCallback;
      xhr.onerror = errorCallback;
      return xhr.send(null);
    };

    MinutaAjaxDownloader.prototype.getMessages = function(response) {
      return response.match(this.ARTICLE_REGEX);
    };

    return MinutaAjaxDownloader;

  })();

  MinutaAjaxMessageParser = (function() {
    function MinutaAjaxMessageParser() {
      this.getPriority = bind(this.getPriority, this);
      this.getTargetUrl = bind(this.getTargetUrl, this);
      this.getId = bind(this.getId, this);
      this.getTimePretty = bind(this.getTimePretty, this);
      this.getFigure = bind(this.getFigure, this);
    }

    MinutaAjaxMessageParser.prototype.TARGET_URL_REGEX = /https?:\/\/dennikn.sk\/minuta\/(\d+)/;

    MinutaAjaxMessageParser.prototype.TIME_REGEX = /(\d{4})-0?(\d+)-0?(\d+)[T ]0?(\d+):0?(\d+):0?(\d+)/;

    MinutaAjaxMessageParser.prototype.MESSAGE_REGEX = /<p>(.*?)<\/p>/gi;

    MinutaAjaxMessageParser.prototype.HTML_REGEX = /(<([^>]+)>)/ig;

    MinutaAjaxMessageParser.prototype.IMAGE_REGEX = /<img.*?src="(.*?)"/;

    MinutaAjaxMessageParser.prototype.ARTICLE_ID_REGEX = /article id="mpm-(\d+)"/;

    MinutaAjaxMessageParser.prototype.PRIORITY_REGEX = /article.*?class="([^>]*?)"/;

    MinutaAjaxMessageParser.prototype.YOUTUBE_REGEX = /youtube\.com\/embed\/(.*?)[\/\?]/;

    MinutaAjaxMessageParser.prototype.PRIORITY_STICKY = "sticky";

    MinutaAjaxMessageParser.prototype.PRIORITY_IMPORTANT = "important";

    MinutaAjaxMessageParser.prototype.messageBody = null;

    MinutaAjaxMessageParser.prototype.parse = function(messageBody) {
      this.messageBody = messageBody.replace(/\s+/g, " ");
      return {
        thumbnail: this.getFigure(),
        time: this.getTimePretty(),
        text: this.getText(),
        id: this.getId(),
        targetUrl: this.getTargetUrl(),
        priority: this.getPriority()
      };
    };

    MinutaAjaxMessageParser.prototype.getFigure = function() {
      var matches;
      matches = this.messageBody.match(this.IMAGE_REGEX);
      if (matches !== null && matches.length === 2) {
        return matches[1];
      }
      matches = this.messageBody.match(this.YOUTUBE_REGEX);
      if ((matches != null) && matches.length === 2) {
        return "http://img.youtube.com/vi/" + matches[1] + "/mqdefault.jpg";
      }
    };

    MinutaAjaxMessageParser.prototype.getTimePretty = function() {
      var matches;
      matches = this.messageBody.match(this.TIME_REGEX);
      if ((matches != null) && matches.length === 7) {
        return ("0" + matches[4]).slice(-2) + ":" + ("0" + matches[5]).slice(-2);
      }
    };

    MinutaAjaxMessageParser.prototype.getText = function() {
      var matches, value;
      matches = this.messageBody.match(this.MESSAGE_REGEX);
      if ((matches != null) && matches.length > 0) {
        value = matches[0].replace(this.HTML_REGEX, "");
        return this.decodeHtml(value);
      }
    };

    MinutaAjaxMessageParser.prototype.getId = function() {
      var matches;
      matches = this.messageBody.match(this.ARTICLE_ID_REGEX);
      if (matches != null) {
        return matches[1];
      }
    };

    MinutaAjaxMessageParser.prototype.getTargetUrl = function() {
      var matches;
      matches = this.messageBody.match(this.TARGET_URL_REGEX);
      if ((matches != null) && matches.length === 2) {
        return matches[0];
      }
    };

    MinutaAjaxMessageParser.prototype.getPriority = function() {
      var classes, matches;
      matches = this.messageBody.match(this.PRIORITY_REGEX);
      if ((matches != null) && matches.length === 2) {
        classes = matches[1];
        if (classes.indexOf("important") !== -1) {
          return this.PRIORITY_IMPORTANT;
        }
        if (classes.indexOf("sticky") !== -1) {
          return this.PRIORITY_STICKY;
        }
      }
    };

    MinutaAjaxMessageParser.prototype.decodeHtml = function(html) {
      var txt;
      txt = document.createElement("textarea");
      txt.innerHTML = html;
      return txt.value;
    };

    return MinutaAjaxMessageParser;

  })();

  Minuta = (function() {
    Minuta.prototype.thumbnail = null;

    Minuta.prototype.time = null;

    Minuta.prototype.message = null;

    Minuta.prototype.id = null;

    Minuta.prototype.targetUrl = null;

    Minuta.prototype.priority = null;

    function Minuta(thumbnail, time, message1, id1, targetUrl1, priority) {
      this.thumbnail = thumbnail;
      this.time = time;
      this.message = message1;
      this.id = id1;
      this.targetUrl = targetUrl1;
      this.priority = priority;
    }

    return Minuta;

  })();

  Notifier = (function() {
    Notifier.prototype.LOGO = "/images/icon512.png";

    Notifier.prototype.BUTTONS = [chrome.i18n.getMessage("readMoreButton")];

    Notifier.prototype.DEFAULT_SETTINGS = {
      "sound": "no-sound",
      "interval": 5,
      "messageCount": 3,
      "importantOnly": false,
      "displayTime": 10,
      "notificationClick": "open"
    };

    Notifier.prototype.DEFAULT_NOTIFICATION_OPTIONS = {
      type: "basic",
      title: chrome.i18n.getMessage("notificationTitle"),
      message: null,
      priority: 1
    };

    Notifier.prototype.notificationSound = null;

    Notifier.prototype.currentSettings = {};

    Notifier.prototype.downloader = null;

    Notifier.prototype.parser = null;

    function Notifier(downloader1, parser1) {
      this.downloader = downloader1;
      this.parser = parser1;
      this.openMessage = bind(this.openMessage, this);
      this.notificationBtnClick = bind(this.notificationBtnClick, this);
      this.notificationClicked = bind(this.notificationClicked, this);
      this.notificationClosed = bind(this.notificationClosed, this);
      this.creationCallback = bind(this.creationCallback, this);
      this.reloadSettings = bind(this.reloadSettings, this);
      this.downloadMessages = bind(this.downloadMessages, this);
      chrome.notifications.onClosed.addListener(this.notificationClosed);
      chrome.notifications.onClicked.addListener(this.notificationClicked);
      chrome.notifications.onButtonClicked.addListener(this.notificationBtnClick);
      this.reloadSettings();
    }

    Notifier.prototype.run = function(silently) {
      var downloader, parser;
      downloader = new this.downloader();
      parser = new this.parser();
      this.reloadSettings();
      return this.downloadMessages(downloader, parser, silently);
    };

    Notifier.prototype.downloadMessages = function(downloader, parser, silently) {
      var minutesInterval;
      minutesInterval = (this.currentSettings['interval'] != null) && parseInt(this.currentSettings['interval']) >= 1 ? parseInt(this.currentSettings['interval']) : 1;
      return downloader.xhrDownload("text", downloader.URI, (function(_this) {
        return function(event) {
          var i, len, message, messages, rawMessage, rawMessages, storage;
          rawMessages = downloader.getMessages(event.target.response);
          storage = {};
          messages = {};
          for (i = 0, len = rawMessages.length; i < len; i++) {
            rawMessage = rawMessages[i];
            if (Object.keys(messages).length === parseInt(_this.currentSettings['messageCount'])) {
              break;
            }
            message = parser.parse(rawMessage);
            if (message.priority === parser.PRIORITY_STICKY) {
              continue;
            }
            messages[message.id] = message;
          }
          return chrome.storage.sync.get(Object.keys(messages), function(alreadyNotifiedMessages) {
            var delay, id;
            delay = 0;
            for (id in messages) {
              message = messages[id];
              if (message.id in alreadyNotifiedMessages) {
                continue;
              }
              if (silently || (_this.currentSettings['importantOnly'] && message.priority !== parser.PRIORITY_IMPORTANT)) {
                storage[message.id] = {
                  "skipped": true,
                  "targetUrl": message.targetUrl
                };
              } else {
                (function(message) {
                  return setTimeout(function() {
                    return _this.notifyArticle(message);
                  }, delay);
                })(message);
                delay += 100;
              }
            }
            if (silently) {
              console.log("silent iteration, skipping following messages...");
              console.log(storage);
              chrome.storage.sync.set(storage);
            }
            return setTimeout(_this.run.bind(_this, false), 60000 * minutesInterval);
          });
        };
      })(this));
    };

    Notifier.prototype.reloadSettings = function() {
      return chrome.storage.sync.get(this.DEFAULT_SETTINGS, (function(_this) {
        return function(val) {
          _this.currentSettings = val;
          if (val['sound'] !== 'no-sound') {
            return _this.notificationSound = new Audio('sounds/' + val['sound'] + '.mp3');
          }
        };
      })(this));
    };

    Notifier.prototype.notifyArticle = function(minuta) {
      var meta, options;
      options = JSON.parse(JSON.stringify(this.DEFAULT_NOTIFICATION_OPTIONS));
      meta = {
        "targetUrl": minuta.targetUrl
      };
      if (!((minuta.id != null) && (minuta.text != null))) {
        console.warn("Could not parse the message from the source, skipping...");
        return false;
      }
      options.message = minuta.text;
      if (minuta.time != null) {
        options.title = "[" + minuta.time + "] " + options.title;
      }
      if (minuta.thumbnail != null) {
        options.type = "image";
        options.imageUrl = minuta.thumbnail;
      }
      this.doNotify(minuta.id, options, meta);
      return true;
    };

    Notifier.prototype.doNotify = function(id, options, meta) {
      var button, i, len, ref, storage;
      options.iconUrl = chrome.runtime.getURL(this.LOGO);
      options.buttons = [];
      ref = this.BUTTONS;
      for (i = 0, len = ref.length; i < len; i++) {
        button = ref[i];
        options.buttons.push({
          title: button
        });
      }
      storage = {};
      storage[id] = meta;
      chrome.storage.sync.set(storage);
      return chrome.notifications.create(id, options, this.creationCallback);
    };

    Notifier.prototype.creationCallback = function(notID) {
      console.log("The nofitication '" + notID + " 'was created.");
      setTimeout((function(_this) {
        return function() {
          return chrome.notifications.clear(notID);
        };
      })(this), 1000 * this.currentSettings['displayTime']);
      if (this.notificationSound != null) {
        return this.notificationSound.play();
      }
    };

    Notifier.prototype.notificationClosed = function(notID, bByUser) {
      return console.log("The notification '" + notID + "' was closed");
    };

    Notifier.prototype.notificationClicked = function(notID) {
      console.log("The notification '" + notID + "' was clicked");
      chrome.notifications.clear(notID);
      if (this.currentSettings['notificationClick'] === 'open') {
        return this.openMessage(notID);
      }
    };

    Notifier.prototype.notificationBtnClick = function(notID) {
      return this.openMessage(notID);
    };

    Notifier.prototype.openMessage = function(notID) {
      return chrome.storage.sync.get(notID, function(val) {
        var targetUrl;
        targetUrl = val[notID].targetUrl;
        return chrome.tabs.create({
          url: targetUrl
        });
      });
    };

    return Notifier;

  })();

  notifier = new Notifier(MinutaAjaxDownloader, MinutaAjaxMessageParser);

  notifier.run(true);

}).call(this);
